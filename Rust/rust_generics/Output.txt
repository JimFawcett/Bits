C:\github\JimFawcett\Bits\Rust\rust_generics
> cargo run
   Compiling rust_hello_objects v0.1.0 (C:\github\JimFawcett\Bits\Rust\rust_generics)
    Finished dev [unoptimized + debuginfo] target(s) in 0.37s
     Running `target\debug\rust_hello_objects.exe`

--------------------------------------------------
  demonstrate generic functions and types
--------------------------------------------------

----------------------------------------------
  std::library objects, string and vector<T>
----------------------------------------------

--- let mut s1 = "a string".to_string() ---
--- show_type_scalar(&s1, "&s1") ---
call name: "&s1", type: "alloc::string::String"
value: "a string", size: 24

--- s1.push_str(" and more"); ---
call name: "&s1", type: "alloc::string::String"
value: "a string and more", size: 24

--- let mut v:Vec<i32> = vec![1, 2, 3, 2, 1]; ---
call name: "&v", type: "alloc::vec::Vec<i32>"
value: [1, 2, 3, 2, 1], size: 24

--- v.push(42); ---
call name: "&v", type: "alloc::vec::Vec<i32>"
value: [1, 2, 3, 2, 1, 42], size: 24

-----------------------------------
  instances of user-defined types
-----------------------------------

s: Stats { items: [1.0, 2.5, -3.5, 4.0, 5.5] }
s.max() = 5.5
s.min() = -3.5
s.sum() = 9.5
s.avg() = 1.9

s: Stats { items: [1, -2, 3, -4, 5] }
s.max() = 5
s.min() = -4
s.sum() = 3
s.avg() = 0.6

"p1": PointN<T> {
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
  0.0, 0.0, 0.0
}
--- show_type(p1, "p1") ---
call name: "p1", type: "rust_hello_objects::points_generic::PointN<f64>"
--- show_value_enum(p1.coors(), "p1", 2, 7) ---
"p1.coors()" {
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
  0.0, 0.0, 0.0
}
size: 24

--- p1.coors()[2] = 3.1415 ---
"p1": PointN<T> {
  0.0, 0.0, 3.1415, 0.0, 0.0, 0.0, 0.0,
  0.0, 0.0, 0.0
}
--- show_value_enum(p1.coors(), "p1.coors()", 2, 7) ---
"p1.coors()" {
  0.0, 0.0, 3.1415, 0.0, 0.0, 0.0, 0.0,
  0.0, 0.0, 0.0
}
size: 24

"p2": PointN<T> {
  0, 1, 2, 3, 4, 4, 3,
  2, 1, 0
}

--- show_type_scalar(p2, "p2") ---
call name: "p2", type: "rust_hello_objects::points_generic::PointN<i32>"
value: PointN { coor: [0, 1, 2, 3, 4, 4, 3, 2, 1, 0] }, size: 24
p2.len() = 10

--- p2.show("p2", 2, 7) ---
"p2": PointN<T> {
  0, 1, 2, 3, 4, 4, 3,
  2, 1, 0
}

-----------------------------------
  Testing formats for collections
-----------------------------------

--- show_type_scalar(&v, "&v") ---
call name: "&v", type: "alloc::vec::Vec<i32>"
value: [0, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14], size: 24

--- show_fold(&v, 2, 5) ---
  0, -1, 2, -3, 4,
  -5, 6, -7, 8, -9,
  10, -11, 12, -13, 14

--- let v = vec![0i32, ... ]; ---
--- fold(&v, 2, 12) ---
  0, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11,
  12, -13, 14

--- let a = &[f64; 8]; ---
--- show_fold(a, 4, 5) ---
    1.0, 2.5, -3.1, 4.3, 5.0,
    6.0, 7.0, -8.0


  That's all Folks!

C:\github\JimFawcett\Bits\Rust\rust_generics
>
