--------------------------------------------------
  demonstrate object creation and use
--------------------------------------------------
----------------------------------------
  demo std vector
----------------------------------------
  s: "a string"

--- "let s1 = s : move construction" ---
s1: "a string"

--- "s1 += \" and more\" : one of many operations" ---
s1: "a string and more"

--- "s = s1.clone : move assignment of clone" ---
s: "a string and more"
s1: "a string and more"

--- "s1 = s1 + \" words\"" ---
--- "s = s1 : move assignment" ---
s: "a string and more words"

--- "let mut h_str = Box::new(\"...\")" ---
h_str: "heap string"
h_str: "heap string and some more"
----------------------------------------
  demo std vector
----------------------------------------
  v: [1, 2, 3, 2, 1]

--- "let v1 = v : move construction" ---
  v1: [1, 2, 3, 2, 1]

--- "v1[1] = -2 : one of many operations" ---
  v1: [1, -2, 3, 2, 1]

--- "v = v1.clone : move assignment of clone" ---
  v: [1, -2, 3, 2, 1]
  v1: [1, -2, 3, 2, 1]

--- "a = &v[1..3]" ---
  a: [-2, 3]

--- "v2 is collect from slice &v[1..3]" ---
  v2: [-2, 3]

--- "v = v2 : move assignment" ---
  v: [-2, 3]

--- "let mut h_vec = Box::new(\"...\")" ---
  h_vec: [1, 2, 3, 4, 5]

--- "(*h_vec)[2] += 2" ---
  h_vec: [1, 2, 5, 4, 5]
--- "h_vec[2] += 2, uses auto deref" ---
  h_vec: [1, 2, 7, 4, 5]

-----------------------------------
  instances of user-defined type Point4D
-----------------------------------

--- "let mut p1 = Point4D::new()" ---
  p1 : Point4D {
    0,   0,   0,
    Wed Dec 20 2023, 12:02:27
  }
  p1 : Point4D {
    42,   -3,   2,
    Wed Dec 20 2023, 12:02:27
  }
  p1 : Point4D {
    42,   -3,   2,
    Wed Dec 20 2023, 12:02:27
  }

--- "using Debug trait with println!" ---
p1: Point4D { x: 42.0, y: -3.0, z: 2.0, t: 2023-12-20T12:02:27.848829800-06:00 }

--- "let p1a = p1.clone()" ---
  p1.clone() : Point4D {
    42,   -3,   2,
    Wed Dec 20 2023, 12:02:27
  }

  using PointN<f64>::coor_x function:
  p1 : Point4D {
    84,   -3,   2,
    Wed Dec 20 2023, 12:02:27
  }

  using PointN<f64>::coor_y function:
  p1 : Point4D {
    84,   84,   2,
    Wed Dec 20 2023, 12:02:27
  }

  using PointN<f64>::coor_z function:
  p1 : Point4D {
    84,   84,   84,
    Wed Dec 20 2023, 12:02:27
  }

  updating time value:
  delaying 5 seconds before time update
  p1 : Point4D {
    84,   84,   84,
    Wed Dec 20 2023, 12:02:32
  }

--- "let p2 = p1 : copy construction" ---
  p2 : Point4D {
    84,   84,   84,
    Wed Dec 20 2023, 12:02:32
  }
  p1 : Point4D {
    84,   84,   84,
    Wed Dec 20 2023, 12:02:32
  }
--- "*p2.coor_x() = 42.0" ---
  p2 : Point4D {
    42,   84,   84,
    Wed Dec 20 2023, 12:02:32
  }
--- "p1 = p2 : copy assignment" ---
  p1 : Point4D {
    42,   84,   84,
    Wed Dec 20 2023, 12:02:32
  }
  p2 : Point4D {
    42,   84,   84,
    Wed Dec 20 2023, 12:02:32
  }

----------------------------------------
  Point4D objects in heap
----------------------------------------
  h_point : Point4D {
    2,   1,   0,
    Wed Dec 20 2023, 12:02:32
  }

--- "let h_point1 = h_point.clone()" ---
  h_point1 : Point4D {
    2,   1,   0,
    Wed Dec 20 2023, 12:02:32
  }

-----------------------------------
  instances of user-defined type PointNPrototype
-----------------------------------

--- "create PointNPrototype, print using Debug trait" ---
  q: PointNPrototype { coords: [1.0, 2.0, 3.0] }
--- "let q1 = q: move construction" ---
  q1: PointNPrototype { coords: [1.0, 2.0, 3.0] }
--- "q = q1: move assignment" ---
  q: PointNPrototype { coords: [1.0, -2.0, 3.0] }
--- "let q2 = q.clone()" ---
  q2: PointNPrototype { coords: [1.0, -2.0, 3.0] }

----------------------------------------
  PointNPrototype objects in heap
----------------------------------------
  h_point_prototype: PointNPrototype { coords: [3.0, 2.5, 2.0] }      
--- "  h_point_prototype.coors()[0] = -3.0;" ---
  h_point_prototype: PointNPrototype { coords: [-3.0, 2.5, 2.0] }     
--- "let h_point_prototype1 = h_point_prototype.clone()" ---
  h_point_prototype1: PointNPrototype { coords: [-3.0, 2.5, 2.0] }    

That's all Folks!


