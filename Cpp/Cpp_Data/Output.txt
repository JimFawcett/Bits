C:\github\JimFawcett\Bits\Cpp\Cpp_Data\build
> debug/Cpp_Data 
--------------------------------------------------
   Demonstrate C++ types
--------------------------------------------------

--------------------------------------------------
  initialize primitives in stack from literals
--------------------------------------------------
  t1: type: int
  t1a: type: __int64
  d: type: double
  s: type: class std::basic_string<char,struct std:...

  --- copy construct ---
  s2: type: class std::basic_string<char,struct std:...

--------------------------------------------------  
  store instances of primitives in heap
--------------------------------------------------  
  dptr: type: double *
  *dptr: type: double

  --- string: control block in stack, data in heap ---
  s2: type: class std::basic_string<char,struct std:...

  --- C++ reference ---
  rs2: type: class std::basic_string<char,struct std:...

  --- unique_ptr owns data ---
  ptr: type: class std::unique_ptr<int,struct std::de...
  *ptr: type: int

  --- heap data deleted when unique_ptr leaves scope ---

--------------------------------------------------  
  demo std library types
--------------------------------------------------  

  v: type: class std::vector<int,class std::allocat...
  value: {
      1, 2, 3, 2, 1
  }
  size:  16

  m: type: class std::unordered_map<class std::basi...
  value: {
    {zero, 0}, {one, 1}, {two, 2}
  }

--------------------------------------------------  
  demonstrate copy
--------------------------------------------------  

  --- direct integer copy ---
  source: 42
  destin: 42

  --- direct vector copy ---
  source:
  v_src: {
    1, 2, 3, 4, 5
  }
  destin:
  v_dst: {
    1, 2, 3, 4, 5
  }

  --- copy integer ---
  before pass_by_value: 42
  t:T: type: int
  after pass_by_value:  42

  --- copy vector ---
  before pass_by_value:
  v: {
    1, 2, 3, 2, 1
  }
  t:T: type: class std::vector<int,class std::allocat...
  after pass_by_value:
  v: {
    1, 2, 3, 2, 1
  }

  --- copy unordered_map ---
  before pass_by_value:
  map {
    {zero, 0}, {one, 1}, {two, 2}
  }
  t:T: type: class std::unordered_map<class std::basi...
  after pass_by_value:
  map {
    {zero, 0}, {one, 1}, {two, 2}
  }

--------------------------------------------------  
  demonstrate copy by reference
--------------------------------------------------  

  --- copy ref of integer ---
  before pass_by_ref: 42
  T: type: int
  after pass_by_ref:  0
  before pass_by_ref:
  v: {
    1, 2, 3, 2, 1
  }
  T: type: class std::vector<int,class std::allocat...
  after pass_by_ref:
  v: {

  }
  --- copy ref of unordered_map ---
  before pass_by_ref:
  map {
    {zero, 0}, {one, 1}, {two, 2}
  }
  T: type: class std::unordered_map<class std::basi...
  after pass_by_ref:
  map {

  }

--------------------------------------------------
  demonstrate move
--------------------------------------------------

  --- move string ---
  s1 = "a string"
  s2 = " plus more"
  s = s1 + s2 => "a string plus more"

  --- move vector ---
  before move:
  v: {
    1, 2, 3, 2, 1
  }
  after move of v into vm:
  vm: {
    1, 2, 3, 2, 1
  }

  v: {

  }


  That's all Folks!


C:\github\JimFawcett\Bits\Cpp\Cpp_Data\build
>>