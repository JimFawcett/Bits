  showLabel("initialize fundamental types");
  nl();

  showOp("scalars", "\n");

  showOp("bool");
  bool b = true;
  std::cout << formatOutput<bool>(
    b, "b", scalarToString<bool>
  );

  showOp("byte");
  std::byte byte { 0x0f };
  /*  std::byte => unsigned char {} */
  std::cout << formatOutput<std::byte>(
    byte, "byte", hexToString<std::byte>
  );

  showOp("int");
  int i = 42;  // equiv to int i { 42 };
  std::cout << formatOutput<int>(
    i, "i", scalarToString<int>
  );

  showOp("double");
  double d = 3.1415927;
  std::cout << formatOutput<double>(
    d, "d", floatToString<double>
  );

  showOp("char");
  char ch = 'z';
  std::cout << formatOutput<char>(
    ch, "ch", scalarToString<char>
  );

  showOp("const char*");
  const char* lst = "a literal string";
  std::cout << formatOutput<const char*>(
    lst, "lst", quotedString<const char*>
  );
  nl();

  showOp("aggregate types");
  nl();

  /*-- array --*/
  showOp("native array");
  short int fa[] { 1, 2, 3, 4, 5 };
  short int fa_alt[5] { 1, 2, 3, 4, 5 };
  std::cout << formatOutput<short int[5]>(
    fa, "fa[]", seq_collectionToString<short int[5]>
  );

  /*-- struct ---------------------------------------------
    - user-defined, so generic formatOutput function 
      is not practical
    - https://en.cppreference.com/w/cpp/utility/format/formatter
  */
  showOp("struct");
  struct S { int a; char b; double c; };
  S strct { 1, 'a', 3.1415927 };
  std::string fstr = std::format("  {:8}{}", "strct: ", "S { ");
  fstr += std::format("{}, {}, {:.5f} }}\n", strct.a, strct.b, strct.c);
  std::cout << fstr;
  showType(strct, "strct");

  /*-- tuple ----------------------------------------------
    - user-defined, so generic formatOutput function 
      is not practical
  */
  showOp("tuple");
  std::tuple<int, double, char> tup { 1, 3.14, 'z' };
  std::cout << "  " << std::setw(WIDTH) << std::left << "tup: " << "{ " 
            << std::get<0>(tup) << ", " 
            << std::get<1>(tup) << ", " 
            << std::get<2>(tup)
            << " }\n";
  showType(tup, "tup");
  
  /*-- optional -------------------------------------------
    - generic format output function would only match this
      one type, so no code reuse
  */
  showOp("optional");
  std::optional<double> opt1 { 3.1415927 };
  std::cout << "  " << std::setw(9) << "opt1: " << opt1.value_or(42.0) << "\n"; 
  std::optional<double> opt2; // { std::nullopt };
  std::cout << "  " << std::setw(WIDTH) << std::left << "opt2: ";
  if(opt2 == std::nullopt) {
    std::cout << "empty\n";
  }
  else {
    std::cout << *opt2 << "\n";
  }
  showType(opt1, "opt1");
  nl();
