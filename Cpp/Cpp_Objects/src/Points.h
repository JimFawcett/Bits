/*-------------------------------------------------------------------
  Points.h defines a point class:
  - Point4D represents points with three integer coordinates
    and 
    unspecified type T
*/
#pragma warning(disable:4996) // warning about ctime use - see below
#include <iostream>
#include <vector>
#include <chrono>
#include <ctime>
/*-------------------------------------------------------------------
  Point4D class represents a point in an integral 4-Dimensional
  space-time lattice. Simple enough for illustration, but still 
  useful.

  It declares all of the special class methods, most with
  default qualifiers to indicate that the compiler will
  generate them as needed.

  The word ctor is an abbreviation of constructor and dtor
  an abbreviation for destructor.
*/
class Point4D {
public: 
  Point4D();                                        // default ctor
  Point4D(const Point4D& pt) = default;             // copy ctor
  Point4D(Point4D&& pt) = default;                  // move ctor
  Point4D& operator=(const Point4D& pt) = default;  // copy assignment
  Point4D& operator=(Point4D&& pt) = default;       // move assignment
  ~Point4D() = default;                             // dtor
  std::string timeToString();
  void updateTime();
  void show();
  double& xCoor() { return x; }
  double& yCoor() { return y; }
  double& zCoor() { return z; }
  std::time_t& tCoor() { return t; }
private:
  double x;
  double y;
  double z;
  std::time_t t;
};

Point4D::Point4D() {
  x = y = z = 0.0;
  t = std::time(0);
}
std::string Point4D::timeToString() {
  return ctime(&t);
  /* 
    ctime is depricated due to a buffer overflow issue.
    That's not a problem here. Compiler warning
    recommends converting to ctime_s, which, unfortunately
    has a different and awkward interface.
  */
}
void Point4D::updateTime() {
  t = std::time(0);
}

void Point4D::show() {
  std::cout << "\n  " << "Point4D {";
  std::cout << "\n    " << x << ", " << y << ", " << z << ", ";
  std::cout << "\n    " << timeToString();
  std::cout << "  }";
}
/* required for showType(T t, const std::string& nm) */
std::ostream& operator<<(std::ostream& out, Point4D& t1) {
  out << "Point4D {";
  out << "    " << t1.xCoor() << ", " << t1.yCoor() << ", " 
               << t1.zCoor() << std::endl
               << "    " << t1.timeToString() << std::endl
               << "  }" << std::endl;
  return out;
}

/*-------------------------------------------------------------------
  Point2<T> class represents a point in an n-Dimensional hyperspace.
  It is more flexible than Point4D by using a template to support
  a variety of coordinate types, and by using a vector to hold
  any finite number of coordinates.

  Its default constructor Point2() is declared delete so it won't
  be provided here nor generated by the compiler.
*/
// template<typename T>
// class Point2 {
// public:
//   Point2() = delete;                              // default ctor
//   Point2(size_t N);
//   Point2(const Point2& pt) = default;             // copy ctor
//   Point2(Point2&& pt) = default;                  // move ctor
//   Point2& operator=(const Point2& pt) = default;  // copy assignment
//   Point2& operator=(Point2&& pt) = default;       // move assignemnt
//   ~Point2() = default;                            // dtor
//   void show();
//   std::vector<T>& coords() { return coord; }
//   size_t& left() { return _left; }
//   size_t& width() { return _width; }
// private:
//   std::vector<T> coord;
//   size_t _left = 2;   // default display indent
//   size_t _width = 7;  // default display row width
// };
// /*-----------------------------------------------
//   Point2<T> constructor with size 
// */
// template<typename T>
// Point2<T>::Point2(size_t N) {
//   for(size_t i=0; i<N; i++) {
//     coord.push_back(T{0});
//   }
// }
// /*-----------------------------------------------
//   Pointt2<T> display function 
// */
// template<typename T>
// void Point2<T>::show() {
//   std::cout << "\n" << indent(_left) << "Point2<T>";
//   std::cout << " {\n";
//   std::cout << fold(coord, _left + 2, _width);
//   std::cout << indent(_left) << "}";
// }
// /*-----------------------------------------------
//   Overload operator<< required for 
//   showType(Point2<T> t, const std::string& nm) 
// */
// template<typename T>
// std::ostream& operator<<(std::ostream& out, Point2<T>& t2) {
//   out << "\n" << indent(t2.left()) << "Point2<T>";
//   out << " {\n";
//   out << fold(t2.coords(), t2.left() + 2, t2.width());
//   out << indent(t2.left()) << "}";
//   return out;
// }
