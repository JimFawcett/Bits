  Demonstrate C++ Objects

  -------------------------
  std library types string and vector<T>
  -------------------------
  --- auto str = std::string("\"Wile E. Coyote\""); ---
  contents of str = "Wile E. Coyote"

  --- showType(str, "str"); ---
  str type: class std::basic_string<char,struct std::char_traits<ch...
  value: "Wile E. Coyote"
  size:  40

  --- auto vec = std::vector<double>{ 3.5, 3, 2.5, 2 }; ---
  --- showType(vec, "vec"); ---
  vec type: class std::vector<double,class std::allocator<double> >
  value:
    vector {
      3.5, 3, 2.5, 2
    }
  size:  32
  --- vec[2] = -2.5; ---
    vector {
      3.5, 3, -2.5, 2
    }
  --- auto vec2 = vec ---
    vector {
      3.5, 3, -2.5, 2
    }
  --- vec2[0] = 42; ---
  vec2:
    vector {
      42, 3, -2.5, 2
    }
  vec:
    vector {
      3.5, 3, -2.5, 2
    }
  -------------------------
  Copy construction, auto vec2 = vec, creates independent instance.
  So changing target vec2 has no affect on source vec.
  -------------------------

  -------------------------
  user-defined types Point1 and Point2<T>
  -------------------------
  --- Point1 p1; ---
  --- p1.show() ---
  Point1 { 0, 0, 0 }
  Point1 { 42, 0, -3 }
  --- showType(p1, "p1", nl) ---
  p1 type: class Point1
  value: Point1 { 42, 0, -3 }
  size:  12
  p1.xCoor() returns value 42

  --- Point2<double> p2(5) ---
  Point2<T> {
    0, 0, 0, 0, 0
  }
  --- p2.coords() = std::vector<double>{ 1.0, -2.0, 3.0, 4.5, -42.0 } ---
  Point2<T> {
    1, -2, 3, 4.5, -42
  }
  --- showType(p2, "p2", nl); ---
  p2 type: class Point2<double>
  value:
  Point2<T> {
    1, -2, 3, 4.5, -42
  }
  size:  48
  p2.coords()[2] = 3

  -------------------------
  heap-based string instance
  -------------------------

  --- pU<std::string> pStr(new std::string("\"Road Runner\"") ---
  pStr contents = "Road Runner"
  --- showType(*pStr, "*pStr") ---
  *pStr type: class std::basic_string<char,struct std::char_traits<ch...
  value: "Road Runner"
  size:  40
  --- showType(move(pStr), "pStr") ---
  pStr type: class std::unique_ptr<class std::basic_string<char,stru...
  value: 000001EB94E0E6B0
  size:  8

  -------------------------
  heap-based vector instance
  -------------------------
  --- pU<std::vector<double>> pVec(new std::vector<double>{ 1.5, 2.5, 3.5 });       
  *pVec type: class std::vector<double,class std::allocator<double> >
  value:
    vector {
      1.5, 2.5, 3.5
    }
  size:  32

  -------------------------
  heap-based Point1 instance
  -------------------------

  --- pU<Point1> pPoint1(new Point1()) ---
  --- pPoint1->show() ---
  Point1 { 0, 0, 0 }
  Point1 { 1, 2, -3 }
  pPoint1->zCoor() = -3
  --- showType(*pPoint1, "*pPoint1"); ---
  *pPoint1 type: class Point1
  value: Point1 { 1, 2, -3 }
  size:  12
  --- showType(std::move(pPoint1), "pPoint1"); ---
  pPoint1 type: class std::unique_ptr<class Point1,struct std::default_...
  value: 000001EB94E11880
  size:  8

  -------------------------
  heap-based Point2<T> instance
  -------------------------

  --- pU<Point2<double>> pPoint2(new Point2<double>(4)) ---
  --- pPoint2->show() ---
  Point2<T> {
    0, 0, 0, 0
  }
  --- pPoint2->coords() = std::vector<double>{ 1.0, 3.5, -2.0, 42.0 }; ---
  Point2<T> {
    1, 3.5, -2, 42
  }
  value of pPoint2->coords()[1] is 3.5
  --- showType(*pPoint2, "*pPoint2"); ---
  *pPoint2 type: class Point2<double>
  value:
  Point2<T> {
    1, 3.5, -2, 42
  }
  size:  48
  --- showType(std::move(pPoint2), "pPoint2"); ---
  pPoint2 type: class std::unique_ptr<class Point2<double>,struct std::...
  value: 000001EB94E0E950
  size:  8

  -------------------------
  Test and demonstrate formatting functions
  -------------------------

--- demonstrate Point2 show() ---

  default indent = 4 and width = 7:
  Point2<T> {
    0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0,
    0
  }

  indent = 6, width = 12:
      Point2<T> {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0
      }

--- demonstrate operator<< overload for Point2 ---

  default indent = 4 and width = 7:
  Point2<T> {
    0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0,
    0
  }

  indent = 6, width = 12:
      Point2<T> {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0
      }

--- demonstrate operator<< overload for vector ---

  default indent = 4 and width = 7:
    vector {
      1, 2, 3, 4, 5, 6, 7,
      8, 9
    }
  indent = 2, width = 5:
  vector {
    1, 2, 3, 4, 5,
    6, 7, 8, 9
  }


  That's all Folks!


