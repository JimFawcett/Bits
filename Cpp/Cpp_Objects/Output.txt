   Demonstrate C++ Objects
  -------------------------
  stack based instances
  -------------------------

--- auto str = std::string("\"Wile E. Coyote\"") ---
  contents of str = "Wile E. Coyote"
  str type: class std::basic_string<char,struct std::char_traits<char>,c...    
  value: "Wile E. Coyote",  size:  40

  --- p1.show() ---
  Point1 { 0, 0, 0 }
  Point1 { 42, 0, -3 }
  p1 type: class Point1
  value: Point1 { 42, 0, -3 },  size:  12
  p1.xCoor() = 42

  Point2 { 0, 0, 0, 0, 0 }
  Point2 { 1, -2, 3, 4.5, -42 }
  p2 type: class Point2<double>
  value: Point2 { 1, -2, 3, 4.5, -42 },  size:  32
  p2.coords()[2] = 3

  -------------------------
  heap-based instances
  -------------------------

--- pU<std::string> pStr(new std::string("\"Road Runner\"") ---
  pStr contents = "Road Runner"
  *pStr type: class std::basic_string<char,struct std::char_traits<char>,c...  
  value: "Road Runner",  size:  40
  pStr type: class std::unique_ptr<class std::basic_string<char,struct st...   
  value: 000001F38E17E0C0,  size:  8

--- pU<Point1> pPoint1(new Point1()) ---

--- pPoint1->show() ---
  Point1 { 0, 0, 0 }
  Point1 { 1, 2, -3 }
  pPoint1->zCoor() = -3

  *pPoint1 type: class Point1
  value: Point1 { 1, 2, -3 },  size:  12
  pPoint1 type: class std::unique_ptr<class Point1,struct std::default_delet...
  value: 000001F38E177890,  size:  8

--- pU<Point2> pPoint2(new Point2(4)) ---

--- pPoint2->show() ---
  Point2 { 0, 0, 0, 0 }
  Point2 { 1, 3.5, -2, 42 }
  pPoint2->coords()[1] = 3.5

  *pPoint2 type: class Point2<double>
  value: Point2 { 1, 3.5, -2, 42 },  size:  32
  pPoint2 type: class std::unique_ptr<class Point2<double>,struct std::defau...
  value: 000001F38E172CE0,  size:  8


  That's all Folks!

