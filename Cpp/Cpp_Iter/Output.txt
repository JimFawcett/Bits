C:\github\JimFawcett\Bits\Cpp\Cpp_Iter\build
> debug/Cpp_Iter

  Demonstrate C++ Iteration

  --------------------------------------------------
    std library types string and vector<T>
  --------------------------------------------------
  contents of str = "Wile E. Coyote"
  --- showType(str, "str"); ---
  str type: class std::basic_string<char,struct std:...
  size:  40

  --------------------------------------------------
    Iterate over string
  --------------------------------------------------
  out: {
    c, o, n, t, e, n, t, s,
     , o, f,  , s, t, r,  ,
    =,  , ", W, i, l, e,  ,
    E, .,  , C, o, y, o, t,
    e, "
  }

  vector<T>: {
    3.5, 3, 2.5, 2
  }
  --- showType(vec, "vec"); ---
  vec type: class std::vector<double,class std::allo...
  size:  32

  --- vec[2] = -2.5; ---
  vec:
  vector<T>: {
    3.5, 3, -2.5, 2
  }
  --- auto vec2 = vec : copy construction ---
  vec2:
  vector<T>: {
    3.5, 3, -2.5, 2
  }
  --- vec2[0] = 42; ---
  vec2:
  vector<T>: {
    42, 3, -2.5, 2
  }
  vec:
  vector<T>: {
    3.5, 3, -2.5, 2
  }
  --------------------------------------------------
    Copy construction, auto vec2 = vec, creates
    independent instance. So changing target vec2
    has no affect on source vec.
  --------------------------------------------------
  --------------------------------------------------
    Iterate over vector
  --------------------------------------------------
  --- function using range-for taking vector ---
    3.5 3 -2.5 2
  --- function using iterator taking iterable container ---
    3.5, 3, -2.5, 2

  --------------------------------------------------
    user-defined type PointN<T>
  --------------------------------------------------
  p1: PointN<T> {
    0, 0, 0, 0, 0
  }
  --------------------------------------------------
    p1.coords() = std::vector<double>
    { 1.0, -2.0, 3.0, 4.5, -42.0 }
  --------------------------------------------------
  p1: PointN<T> {
    1, -2, 3, 4.5, -42
  }
  --- showType(p1, "p1", nl); ---
  p1 type: class PointN<double>
  size:  48
  p1.coords()[2] = 3

  --------------------------------------------------
    iterate over PointN<T>
  --------------------------------------------------
  --- function using range-for taking Point ---
    1 -2 3 4.5 -42
  --- function using iterator taking Point ---
    1, -2, 3, 4.5, -42
  --- function using iterator taking iterable container ---
  p1: {
    1, -2, 3, 4.5, -42
  }
  --- same function attempting to take non-iterable ---
  whiler input type is not iterable


  --------------------------------------------------
    heap-based string instance
  --------------------------------------------------
  --- pU<std::string> pStr(new std::string("\"Road Runner\"") ---
  pStr contents = "Road Runner"

  --- showType(*pStr, "*pStr") ---
  *pStr type: class std::basic_string<char,struct std:...
  size:  40

  --- showType(move(pStr), "pStr") ---
  pStr type: class std::unique_ptr<class std::basic_s...
  size:  8

  --------------------------------------------------
    heap-based vector instance
  --------------------------------------------------
  --- pU<std::vector<double>>
      pVec(new std::vector<double>{ 1.5, 2.5, 3.5 }); ---

  --- iterating over *pVec ---
  *pVec: {
    1.5, 2.5, 3.5
  }

  *pVec =
  vector<T>: {
    1.5, 2.5, 3.5
  }
  *pVec type: class std::vector<double,class std::allo...
  size:  32

  pVec = 000002965C6829B0
  move(pVec) type: class std::unique_ptr<class std::vector<...
  size:  8

  --------------------------------------------------
    heap-based PointN instance
  --------------------------------------------------
  --- pU<PointN<double>> pPointN(new PointN<double>(4)) ---
  *pPointN: PointN<T> {
    0, 0, 0, 0
  }
  --- pPointN->coords() =
      std::vector<double>{ 1.0, 3.5, -2.0, 42.0 }; ---
  *pPointN: PointN<T> {
    1, 3.5, -2, 42
  }
  value of pPointN->coords()[1] is 3.5
  --- showType(*pPointN, "*pPointN"); ---
  *pPointN type: class PointN<double>
  size:  48

  --- iterating over *pPointN ---
  *pPointN: {
    1, 3.5, -2, 42
  }

  --- showType(std::move(pPointN), "pPointN"); ---
  pPointN type: class std::unique_ptr<class PointN<doubl...
  size:  8

  --------------------------------------------------
    Iterate over map, using Analysis::format
  --------------------------------------------------
  map: {
    {one, 1}, {two, 2}, {zero, 0}
  }

  That's all Folks!

C:\github\JimFawcett\Bits\Cpp\Cpp_Iter\build
>
