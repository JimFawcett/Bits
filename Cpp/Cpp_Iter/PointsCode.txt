
/*-------------------------------------------------------------------
  Points.h defines two point classes
  - Point1 represents points with three integer coordinates
  - Point2<T> represents points with many coordinates of
    unspecified type T
*/
#include <iostream>
#include <vector>
/*-------------------------------------------------------------------
  Point1 class represents a point in an integral 3-Dimensional
  lattice. Simple enough for illustration, but still useful.

  It declares all of the special class methods, most with
  default qualifiers to indicate that the compiler will
  generate them as needed.

  The word ctor is an abbreviation of constructor and dtor
  an abbreviation for destructor.
*/
class Point1 {
public:
  Point1();                                       // default ctor
  Point1(const Point1& pt) = default;             // copy ctor
  Point1(Point1&& pt) = default;                  // move ctor
  Point1& operator=(const Point1& pt) = default;  // copy assignment
  Point1& operator=(Point1&& pt) = default;       // move assignment
  ~Point1() = default;                            // dtor
  void show();
  int& xCoor() { return x; }
  int& yCoor() { return y; }
  int& zCoor() { return z; }
private:
  int x;
  int y;
  int z;
};

Point1::Point1() {
  x = y = z = 0;
}
void Point1::show() {
  std::cout << "\n  " << "Point1";
  std::cout << " { " << x << ", " << y << ", " << z << " }";
}
/* required for showType(T t, const std::string& nm) */
std::ostream& operator<<(std::ostream& out, Point1& t1) {
  out << "Point1";
  out << " { " << t1.xCoor() << ", " << t1.yCoor() << ", " 
               << t1.zCoor() << " }";
  return out;
}

/*-------------------------------------------------------------------
  Point2<T> class represents a point in an n-Dimensional hyperspace.
  It is more flexible than Point1 by using a template to support
  a variety of coordinate types, and by using a vector to hold
  any finite number of coordinates.

  Its default constructor Point2() is declared delete so it won't
  be provided here nor generated by the compiler.
*/
template<typename T>
class Point2 {
public:
  Point2() = delete;                              // default ctor
  Point2(size_t N);
  Point2(const Point2& pt) = default;             // copy ctor
  Point2(Point2&& pt) = default;                  // move ctor
  Point2& operator=(const Point2& pt) = default;  // copy assignment
  Point2& operator=(Point2&& pt) = default;       // move assignemnt
  ~Point2() = default;                            // dtor
  void show();
  std::vector<T>& coords() { return coord; }
  size_t& left() { return _left; }
  size_t& width() { return _width; }
private:
  std::vector<T> coord;
  size_t _left = 2;   // default display indent
  size_t _width = 7;  // default display row width
};
/*-----------------------------------------------
  Point2<T> constructor with size 
*/
template<typename T>
Point2<T>::Point2(size_t N) {
  for(size_t i=0; i<N; i++) {
    coord.push_back(T{0});
  }
}
/*-----------------------------------------------
  Pointt2<T> display function 
*/
template<typename T>
void Point2<T>::show() {
  std::cout << "\n" << indent(_left) << "Point2<T>";
  std::cout << " {\n";
  std::cout << fold(coord, _left + 2, _width);
  std::cout << indent(_left) << "}";
}
/*-----------------------------------------------
  Overload operator<< required for 
  showType(Point2<T> t, const std::string& nm) 
*/
template<typename T>
std::ostream& operator<<(std::ostream& out, Point2<T>& t2) {
  out << "\n" << indent(t2.left()) << "Point2<T>";
  out << " {\n";
  out << fold(t2.coords(), t2.left() + 2, t2.width());
  out << indent(t2.left()) << "}";
  return out;
}
