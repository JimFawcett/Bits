----------------------------------------
  copy and modify aggregate
----------------------------------------

-- t3 = [1, 2, 3, 2, 1] --
t3 <class 'list'>
value:  [1, 2, 3, 2, 1] , size:  104
-- t4 = t3 --
t4 <class 'list'>
value:  [1, 2, 3, 2, 1] , size:  104
t3: address: 0x248ce392280
t4: address: 0x248ce392280
----------------------------------------
  After copy construction t3 and t4 have
  same address, e.g., two handles pointing
  to the same heap integer object.
----------------------------------------
-- t3.append(0)  # modify object --
t3 <class 'list'>
value:  [1, 2, 3, 2, 1, 0] , size:  104
t3: address: 0x248ce392280
t4 <class 'list'>
value:  [1, 2, 3, 2, 1, 0] , size:  104
t4: address: 0x248ce392280
----------------------------------------
  After appending new value for t3,
  t3 and t4 still have same value and
  address, e.g., two handles pointing
  to same heap integer object. No copy
  on write.
----------------------------------------

-- t5 = "Hello Python" --
t5 <class 'str'>
value:  Hello Python , size:  61
-- t6 = t5  # copy construction --
t6 <class 'str'>
value:  Hello Python , size:  61
t5: address: 0x248ce3ac5f0
t6: address: 0x248ce3ac5f0
----------------------------------------
  After copy construction t5 and t6 have
  same address, e.g., two handles pointing
  to the same heap string object.
----------------------------------------
-- t6 = t6.replace("P", "p")  # copy on write --
t6 <class 'str'>
value:  Hello python , size:  61
t5 <class 'str'>
value:  Hello Python , size:  61
t6: address: 0x248ce3ada70
t5: address: 0x248ce3ac5f0
----------------------------------------
  After modifying value for t6,
  t5 and t6 have different values
  and addresses, e.g., string has
  copy on write.
----------------------------------------


