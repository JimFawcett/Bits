> py Py_Iter.py

--------------------------------------------------
  Demonstrate Python Iterators
--------------------------------------------------

--------------------------------------------------
  basic iteration over ranges
--------------------------------------------------

--- extracting iterator from range(0,10) ---
  0 1 2 3 4 5 6 7 8 9
--- extracting iterator from range(0,10) with iter() and next() ---
  0 1 2 3 4 5 6 7 8 9
--- idiomatic for-in iteration over range(1,6) ---
  1 2 3 4 5
--- using iterator returned by generator ---
  1 2 3 4
--- idiomatic iteration over range(1,5) using generator ---        
  1 2 3 4

--------------------------------------------------
  iteration over std collections
--------------------------------------------------

--- list[float] ---
<class 'list'>
  1, 2.25, 3.5, 2.75, 1

--- string ---
<class 'str'>
  a,  , s, t, r, i, n, g

--- dictionary[str, int] ---
<class 'dict'>
  { zero :  0 }, { one :  1 }, { two :  2 }, { three :  3 }        

--------------------------------------------------
  iteration over user-defined collections
--------------------------------------------------

--- Stats[float] ---
[1.0, 2.25, 3.5, 4.75, 5.0]
  max: 5.0
  min: 1.0
  sum: 16.5
  avg: 3.3

--- iterating over s:Stats[float] ---
  1.0 2.25 3.5 4.75 5.0

--- error handling for empty serr: Stats[float] ---
  serr.avg():  None

--- Point[float] ---
p {
  1.0, 2.25, 3.5, 4.75, 5.0
}

--- iterate using p's iterator ---
  1.0, 2.25, 3.5, 4.75, 5.0

--------------------------------------------------
  iteration_using_formatting_functions
--------------------------------------------------

--- forloopFormatted(list[int]) ---
   l <class 'list'>
    1, 2, 3, 2, 1

--- forloopFormatted(str) ---
   str <class 'str'>
    a,  , s, t, r, i, n, g

--- Anal.showTypeEnum(range(1,6), ...) ---
  range(1,6) <class 'range'> dynamic
  {
    1, 2, 3, 4, 5
  }
  size: 48

--- forloopFormattedFolded(list) ---
  list[float]
    1.0, 2.5, -3.5, 2.0,
    1.5, 0.5

--- forloopAssocFolded(dict) ---
  dictionary[int, str]
    { 1 : one }, { 2 : two }, { 3 : three }, { 4 : four },
    { 5 : five }

--------------------------------------------------
  formatted iteration over user-defined type
--------------------------------------------------

--- p.show('p', 0, 7) ---
  p {
    0, 1, 0, 3.5, 0, 0, 0,
    0, 0, 42
  }

--- forloopFormattedFolded(p, 'p : Points...', 4, 7) ---
  p : Points.Point[float](10)
    0, 1, 0, 3.5, 0, 0, 0,
    0, 0, 42


That's all folks!

C:\github\JimFawcett\Bits\Python\Py_Iter
