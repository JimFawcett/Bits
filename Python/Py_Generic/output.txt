C:\github\JimFawcett\Bits\Python\Py_Generic
> python Py_Generic.py
--------------------------------------------------
  Demonstrate Python Generics
--------------------------------------------------
--------------------------------------------------
  Python introduced generics and type hints
  to check for type errors using mypy, a static
  type checking tool.
--------------------------------------------------

--------------------------------------------------
  demo std generics
--------------------------------------------------

--- list[int] ---
<class 'list'>
[1, 2, 3, 2, 1]

--- list[str] ---
<class 'list'>
['you', 'me', 'them', 'us']

--- tuple(int, float, str) ---
<class 'tuple'>
(42, -0.5, 'forty two')

--- dict[str, int] ---
<class 'dict'>
{'zero': 0, 'one': 1, 'two': 2, 'three': 3}

--------------------------------------------------
  demo user-defined generics
--------------------------------------------------

--- Hello(42) ---
  <class '__main__.Hello'>
  h1: Hello { 42 }

--- Hello() uses default argument ---
  h2: Hello { 0 }

--- h2.value = 3.1415927 ---
  h2: Hello { 3.1415927 }

--- p1 = Points.Point[float](5) ---
  <class 'PointsGen.Point'>
  p1
  {
     0, 1.5, 0, -2.0, 42
  }

--------------------------------------------------
  demo generic functions
--------------------------------------------------

--- Anal.showType(list[int], name) ---
  l1 <class 'list'> dynamic
  value: [1, 2, 3, 2, 1, 0, -1, -2, -1, 0], size: 136

--- showTypeEnum(list[int], name) ---
  l1 <class 'list'> dynamic
  {
    1, 2, 3, 2, 1, 0, -1,
    -2, -1, 0
  }
  size: 136


That's all folks!

C:\github\JimFawcett\Bits\Python\Py_Generic

